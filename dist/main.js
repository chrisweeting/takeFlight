/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/styles/index.css":
/*!******************************!*\
  !*** ./src/styles/index.css ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _styles_index_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/index.css */ "./src/styles/index.css");

var titleCard = document.querySelector(".title-card");
var canvas = document.getElementById("flyCanvas");
var ctx = canvas.getContext("2d");
var rightPressed = false;
var leftPressed = false;
var spacePressed = false;
var turnX = 0;
var y = 0;
var score = 0;
var hiScore = 0;
var rotation = 0;
var counter = 0;
var cactiColors = ["#076d07", "#2e7a2f", "#a1d6a2", "#5ef75e"];
var cacti = [];
var birdImg = new Image();
birdImg.src = "src/assets/Take Flight-05.png";
var cactus1 = new Image();
cactus1.src = "src/assets/Take Flight-06.png";
var cactus2 = new Image();
cactus2.src = "src/assets/Take Flight-07.png";
var cactus3 = new Image();
cactus3.src = "src/assets/Take Flight-08.png";
var cactus4 = new Image();
cactus4.src = "src/assets/Take Flight-09.png";
var cactus5 = new Image();
cactus5.src = "src/assets/Take Flight-10.png";
var cactus6 = new Image();
cactus6.src = "src/assets/Take Flight-11.png";
var cactus7 = new Image();
cactus7.src = "src/assets/Take Flight-12.png";
var cactus8 = new Image();
cactus8.src = "src/assets/Take Flight-13.png";
var cloud1 = new Image();
cloud1.src = "src/assets/Take Flight-03.png";
var cloud2 = new Image();
cloud2.src = "src/assets/Take Flight-04.png";
var cactusBin = [{
  img: cactus1,
  width: 180,
  height: 300
}, {
  img: cactus2,
  width: 180,
  height: 300
}, {
  img: cactus3,
  width: 150,
  height: 250
}, {
  img: cactus4,
  width: 150,
  height: 140
}, {
  img: cactus5,
  width: 100,
  height: 100
}, {
  img: cactus6,
  width: 170,
  height: 150
}, {
  img: cactus7,
  width: 100,
  height: 150
}, {
  img: cactus8,
  width: 80,
  height: 280
}];
var cloudPositions = {
  cloud1: 100,
  cloud2: -330,
  cloud3: -730,
  cloud4: 700
};
ctx.translate(640, 360);

var keyDownHandler = function keyDownHandler(e) {
  if (e.key == "Right" || e.key == "ArrowRight") {
    rightPressed = true;
  } else if (e.key == "Left" || e.key == "ArrowLeft") {
    leftPressed = true;
  } else if (e.key === ' ' || e.key === 'Spacebar') {
    spacePressed = true;
  }
};

var keyUpHandler = function keyUpHandler(e) {
  if (e.key == "Right" || e.key == "ArrowRight") {
    rightPressed = false;
  } else if (e.key == "Left" || e.key == "ArrowLeft") {
    leftPressed = false;
  } else if (e.key === ' ' || e.key === 'Spacebar') {
    // restart();
    animate();
    animate();
    titleCard.classList.add("hidden");
    spacePressed = false;
  }
};

document.addEventListener("keydown", keyDownHandler, false);
document.addEventListener("keyup", keyUpHandler, false);

var drawHorizon = function drawHorizon() {
  ctx.beginPath();
  ctx.rect(-1000, y, 2000, 1500);
  ctx.fillStyle = "#e8e2a4";
  ctx.fill();
  ctx.closePath();
}; // const drawRotation = () => {
//   ctx.font = "16px Arial";
//   ctx.fillStyle = "#0095DD";
//   ctx.fillText("Rotation: " + rotation, 1, 1);
// };


var drawScore = function drawScore() {
  if (score > 4000) {
    ctx.font = "18px Helvetica";
    ctx.fillStyle = "#0095DD";
  } else {
    ctx.font = "16px Helvetica";
    ctx.fillStyle = "#0095DD";
  }

  ctx.fillText("Score: " + score, 3, -3);
};

var drawHiScore = function drawHiScore() {
  if (score > hiScore) hiScore = score;
  ctx.font = "16px Helvetica";
  ctx.fillStyle = "red";
  ctx.fillText("High Score: " + hiScore, 3, -20);
};

var rotateCam = function rotateCam(num) {
  if (num < 100 && num > 0) {
    return ctx.rotate(Math.PI / 180 * 0.05);
  } else if (num > -100 && num < 0) {
    return ctx.rotate(Math.PI / 180 * -0.05);
  }
};

var drawBird = function drawBird() {
  ctx.save();
  ctx.translate(0, 150);
  ctx.rotate(Math.PI / 180 * -(rotation * 0.5 / 4)); // ctx.shadowBlur = 50;
  // ctx.shadowColor = 'black';
  // ctx.shadowOffsetY = 80;

  ctx.drawImage(birdImg, -125, -50, 250, 100); // ctx.beginPath();
  // // ctx.rect(-60, -10, 120, 20);
  // ctx.rect(-125, -50, 250, 100);
  // ctx.fillStyle = "blue";
  // ctx.fill();
  // ctx.closePath();

  ctx.restore();
};

var drawCactus = function drawCactus(x, y, w, h, color, img) {
  ctx.save(); // const place = -30 + x;
  // const width = 20 + w;
  // const height = 60 + h;
  // const growingX = place + gX;
  // const growingY =

  ctx.drawImage(img, x, y, w, h); // ctx.beginPath();
  // ctx.rect(x, y, w, h);
  // ctx.fillStyle = color;
  // ctx.fill();
  // ctx.closePath();

  ctx.restore();
};

var spawnCacti = function spawnCacti() {
  var x = Math.ceil(Math.random() * 840) * (Math.round(Math.random()) ? 1 : -1);
  var color = cactiColors[Math.floor(Math.random() * cactiColors.length)];
  var _cactusBin$Math$floor = cactusBin[Math.floor(Math.random() * cactusBin.length)],
      width = _cactusBin$Math$floor.width,
      height = _cactusBin$Math$floor.height,
      img = _cactusBin$Math$floor.img;
  cacti.unshift({
    x: x,
    y: -100,
    width: width,
    height: height,
    color: color,
    hInitial: 0,
    yOrd: 0,
    img: img
  }); //assign default variables store them in objects
};

var drawClouds = function drawClouds() {
  // ctx.beginPath();
  // ctx.arc(cloud1.sec1, -200, 50, 0, 2 * Math.PI);
  // ctx.arc(cloud1.sec2, -170, 40, 0, 2 * Math.PI);
  // ctx.arc(cloud1.sec3, -150, 30, 0, 2 * Math.PI);
  // ctx.fillStyle = "#add6d8";
  // ctx.fill();
  ctx.drawImage(cloud1, cloudPositions.cloud1, -200, 300, 200);
  ctx.drawImage(cloud2, cloudPositions.cloud2, -300, 300, 150);
  ctx.drawImage(cloud1, cloudPositions.cloud3, -200, 300, 200);
  ctx.drawImage(cloud2, cloudPositions.cloud4, -300, 300, 150); // ctx.beginPath();
  // ctx.arc(cloud2.sec1, -70, 40, 0, 2 * Math.PI);
  // ctx.arc(cloud2.sec2, -100, 40, 0, 2 * Math.PI);
  // ctx.arc(cloud2.sec3, -80, 50, 0, 2 * Math.PI);
  // ctx.fillStyle = "#add6d8";
  // ctx.fill();
};

var moveClouds = function moveClouds(num) {
  for (var cloud in cloudPositions) {
    var pos = cloudPositions[cloud];
    pos += num;
  }
};

var filterCacti = function filterCacti() {
  cacti = cacti.filter(function (cactus) {
    return cactus.y < 550;
  });
};

var animate = function animate() {
  ctx.clearRect(-1000, -1000, 2000, 2000);
  filterCacti();
  drawHorizon();
  drawClouds(); // drawRotation();

  drawScore();
  drawHiScore();
  drawBird(); //cactus spawn frequency

  if (counter === 55) {
    spawnCacti();
    counter = 0;
  }

  cacti.forEach(function (cactus) {
    cactus.x += turnX;
    var h = cactus.height;

    if (cactus.hInitial < cactus.height) {
      cactus.hInitial += 1;
      h = cactus.hInitial;
      cactus.yOrd -= 1;
    } else {
      cactus.yOrd += 1.49;
      cactus.y += 1.49; // cactus.width += cactus.width * 0.0014;
      // cactus.height += cactus.height * 0.0014;
      // cactus.height *= 1.0014;

      cactus.hInitial = cactus.height;
    } //cactus removal animation and yOrd speed control
    // if (cactus.width > 50) {
    //   cactus.yOrd += 1;
    //   cactus.height -= 1;
    // } else if (cactus.width > 27) {
    //   cactus.yOrd += 1;
    //   // cactus.color = "black";
    // } else if (cactus.width > 23) {
    //   cactus.yOrd += 0.5;
    //   // cactus.color = "red";
    // }


    if (cactus.y > 0) {// cactus.color = "red";
    } // cactus path change to account for perspective


    if (cactus.y > -90) {
      if (cactus.x > 100) {
        cactus.x += 0.55;
      } else if (cactus.x < -100) {
        cactus.x -= 0.55;
      } else if (cactus.x > 60) {
        cactus.x += 0.2;
      } else if (cactus.x < -60) {
        cactus.x -= 0.2;
      } else if (cactus.x > 80) {
        cactus.x += 0.4;
      } else if (cactus.x < -80) {
        cactus.x -= 0.4;
      } else if (cactus.x > 40) {
        cactus.x += 0.1;
      } else if (cactus.x < -40) {
        cactus.x -= 0.1;
      } else if (cactus.x > 20) {
        cactus.x += 0.05;
      } else if (cactus.x < -20) {
        cactus.x -= 0.05;
      }
    } // let cactusHit = cactus.y - ( h/5 );


    var cactusHit = cactus.y;
    var leftHit = cactus.x + cactus.width / 2; // if ((cactusHit < 10 && cactusHit > 5) && (cactus.x > -225 && cactus.x < 100)) {

    if (cactus.y < 10 && cactus.y > 5 && leftHit > -125 && leftHit < 125) {
      // cactus.color = "purple";
      // clearInterval(interval);
      document.location.reload();
    }

    drawCactus(cactus.x, cactus.yOrd, cactus.width, h, cactus.color, cactus.img);
  });

  if (leftPressed) {
    if (turnX <= 0) {
      turnX += 0.055;
    } else if (turnX > 0 && turnX < 1.7) {
      turnX += 0.035;
    }

    moveClouds(0.61); //change value to shift cloud x position  

    if (rotation < 100 && rotation >= 0) {
      rotation += 1;
      rotateCam(rotation);
    } else if (rotation < 0) {
      rotation += 1;
      ctx.rotate(Math.PI / 180 * 0.05);
    }
  } else if (rightPressed) {
    if (turnX >= 0) {
      turnX -= 0.055;
    } else if (turnX < 0 && turnX > -1.7) {
      turnX -= 0.35;
    }

    moveClouds(-0.61); //change value to shift cloud x position 

    if (rotation > -100 && rotation <= 0) {
      rotation -= 1;
      rotateCam(rotation);
    } else if (rotation > 0) {
      rotation -= 1;
      ctx.rotate(Math.PI / 180 * -0.05);
    }
  } else {
    if (rotation > 0) {
      rotation -= 1;
      ctx.rotate(Math.PI / 180 * -0.05);
    } else if (rotation < 0) {
      rotation += 1;
      ctx.rotate(Math.PI / 180 * 0.05);
    } else {
      turnX = 0;
    }
  }

  counter += 1;
  score += 1;
  requestAnimationFrame(animate);
}; // const interval = setInterval(animate, 10);
// animate();
// if (spacePressed) {
//   interval();
// }
//on keydown the horizon rotates to a certain point
//on keyup the horizon returns to its initial state
//as the horizon shifts enemy elements/obstacles shift too
//they also add or decrease their x position depending on the key direction
//variable for time elapsed === high score
//high score saved and displayed
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90YWtlX2ZsaWdodC8uL3NyYy9zdHlsZXMvaW5kZXguY3NzIiwid2VicGFjazovL3Rha2VfZmxpZ2h0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3Rha2VfZmxpZ2h0L3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vdGFrZV9mbGlnaHQvLi9zcmMvaW5kZXguanMiXSwibmFtZXMiOlsidGl0bGVDYXJkIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiY2FudmFzIiwiZ2V0RWxlbWVudEJ5SWQiLCJjdHgiLCJnZXRDb250ZXh0IiwicmlnaHRQcmVzc2VkIiwibGVmdFByZXNzZWQiLCJzcGFjZVByZXNzZWQiLCJ0dXJuWCIsInkiLCJzY29yZSIsImhpU2NvcmUiLCJyb3RhdGlvbiIsImNvdW50ZXIiLCJjYWN0aUNvbG9ycyIsImNhY3RpIiwiYmlyZEltZyIsIkltYWdlIiwic3JjIiwiY2FjdHVzMSIsImNhY3R1czIiLCJjYWN0dXMzIiwiY2FjdHVzNCIsImNhY3R1czUiLCJjYWN0dXM2IiwiY2FjdHVzNyIsImNhY3R1czgiLCJjbG91ZDEiLCJjbG91ZDIiLCJjYWN0dXNCaW4iLCJpbWciLCJ3aWR0aCIsImhlaWdodCIsImNsb3VkUG9zaXRpb25zIiwiY2xvdWQzIiwiY2xvdWQ0IiwidHJhbnNsYXRlIiwia2V5RG93bkhhbmRsZXIiLCJlIiwia2V5Iiwia2V5VXBIYW5kbGVyIiwiYW5pbWF0ZSIsImNsYXNzTGlzdCIsImFkZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkcmF3SG9yaXpvbiIsImJlZ2luUGF0aCIsInJlY3QiLCJmaWxsU3R5bGUiLCJmaWxsIiwiY2xvc2VQYXRoIiwiZHJhd1Njb3JlIiwiZm9udCIsImZpbGxUZXh0IiwiZHJhd0hpU2NvcmUiLCJyb3RhdGVDYW0iLCJudW0iLCJyb3RhdGUiLCJNYXRoIiwiUEkiLCJkcmF3QmlyZCIsInNhdmUiLCJkcmF3SW1hZ2UiLCJyZXN0b3JlIiwiZHJhd0NhY3R1cyIsIngiLCJ3IiwiaCIsImNvbG9yIiwic3Bhd25DYWN0aSIsImNlaWwiLCJyYW5kb20iLCJyb3VuZCIsImZsb29yIiwibGVuZ3RoIiwidW5zaGlmdCIsImhJbml0aWFsIiwieU9yZCIsImRyYXdDbG91ZHMiLCJtb3ZlQ2xvdWRzIiwiY2xvdWQiLCJwb3MiLCJmaWx0ZXJDYWN0aSIsImZpbHRlciIsImNhY3R1cyIsImNsZWFyUmVjdCIsImZvckVhY2giLCJjYWN0dXNIaXQiLCJsZWZ0SGl0IiwibG9jYXRpb24iLCJyZWxvYWQiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7Ozs7Ozs7VUNBQTtVQUNBOztVQUVBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBO1VBQ0E7VUFDQTtVQUNBOztVQUVBO1VBQ0E7O1VBRUE7VUFDQTtVQUNBOzs7OztXQ3RCQTtXQUNBO1dBQ0E7V0FDQSxzREFBc0Qsa0JBQWtCO1dBQ3hFO1dBQ0EsK0NBQStDLGNBQWM7V0FDN0QsRTs7Ozs7Ozs7Ozs7O0FDTkE7QUFFQSxJQUFNQSxTQUFTLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixhQUF2QixDQUFsQjtBQUNBLElBQU1DLE1BQU0sR0FBR0YsUUFBUSxDQUFDRyxjQUFULENBQXdCLFdBQXhCLENBQWY7QUFDQSxJQUFNQyxHQUFHLEdBQUdGLE1BQU0sQ0FBQ0csVUFBUCxDQUFrQixJQUFsQixDQUFaO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLEtBQW5CO0FBQ0EsSUFBSUMsV0FBVyxHQUFHLEtBQWxCO0FBQ0EsSUFBSUMsWUFBWSxHQUFHLEtBQW5CO0FBQ0EsSUFBSUMsS0FBSyxHQUFHLENBQVo7QUFDQSxJQUFJQyxDQUFDLEdBQUcsQ0FBUjtBQUNBLElBQUlDLEtBQUssR0FBRyxDQUFaO0FBQ0EsSUFBSUMsT0FBTyxHQUFHLENBQWQ7QUFDQSxJQUFJQyxRQUFRLEdBQUcsQ0FBZjtBQUNBLElBQUlDLE9BQU8sR0FB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Q0E7QUFDQTtBQUVJO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQSxnQyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsImltcG9ydCAnLi9zdHlsZXMvaW5kZXguY3NzJztcblxuY29uc3QgdGl0bGVDYXJkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi50aXRsZS1jYXJkXCIpO1xuY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJmbHlDYW52YXNcIik7XG5jb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO1xubGV0IHJpZ2h0UHJlc3NlZCA9IGZhbHNlO1xubGV0IGxlZnRQcmVzc2VkID0gZmFsc2U7XG5sZXQgc3BhY2VQcmVzc2VkID0gZmFsc2U7XG5sZXQgdHVyblggPSAwO1xubGV0IHkgPSAwO1xubGV0IHNjb3JlID0gMDtcbmxldCBoaVNjb3JlID0gMDtcbmxldCByb3RhdGlvbiA9IDA7XG5sZXQgY291bnRlciA9IDA7XG5sZXQgY2FjdGlDb2xvcnMgPSBbXCIjMDc2ZDA3XCIsIFwiIzJlN2EyZlwiLCBcIiNhMWQ2YTJcIiwgXCIjNWVmNzVlXCJdO1xubGV0IGNhY3RpID0gW107XG5cblxuY29uc3QgYmlyZEltZyA9IG5ldyBJbWFnZSgpO1xuYmlyZEltZy5zcmMgPSBcInNyYy9hc3NldHMvVGFrZSBGbGlnaHQtMDUucG5nXCI7XG5cbmNvbnN0IGNhY3R1czEgPSBuZXcgSW1hZ2UoKTtcbmNhY3R1czEuc3JjID0gXCJzcmMvYXNzZXRzL1Rha2UgRmxpZ2h0LTA2LnBuZ1wiO1xuXG5jb25zdCBjYWN0dXMyID0gbmV3IEltYWdlKCk7XG5jYWN0dXMyLnNyYyA9IFwic3JjL2Fzc2V0cy9UYWtlIEZsaWdodC0wNy5wbmdcIjtcblxuY29uc3QgY2FjdHVzMyA9IG5ldyBJbWFnZSgpO1xuY2FjdHVzMy5zcmMgPSBcInNyYy9hc3NldHMvVGFrZSBGbGlnaHQtMDgucG5nXCI7XG5cbmNvbnN0IGNhY3R1czQgPSBuZXcgSW1hZ2UoKTtcbmNhY3R1czQuc3JjID0gXCJzcmMvYXNzZXRzL1Rha2UgRmxpZ2h0LTA5LnBuZ1wiO1xuXG5jb25zdCBjYWN0dXM1ID0gbmV3IEltYWdlKCk7XG5jYWN0dXM1LnNyYyA9IFwic3JjL2Fzc2V0cy9UYWtlIEZsaWdodC0xMC5wbmdcIjtcblxuY29uc3QgY2FjdHVzNiA9IG5ldyBJbWFnZSgpO1xuY2FjdHVzNi5zcmMgPSBcInNyYy9hc3NldHMvVGFrZSBGbGlnaHQtMTEucG5nXCI7XG5cbmNvbnN0IGNhY3R1czcgPSBuZXcgSW1hZ2UoKTtcbmNhY3R1czcuc3JjID0gXCJzcmMvYXNzZXRzL1Rha2UgRmxpZ2h0LTEyLnBuZ1wiO1xuXG5jb25zdCBjYWN0dXM4ID0gbmV3IEltYWdlKCk7XG5jYWN0dXM4LnNyYyA9IFwic3JjL2Fzc2V0cy9UYWtlIEZsaWdodC0xMy5wbmdcIjtcblxuY29uc3QgY2xvdWQxID0gbmV3IEltYWdlKCk7XG5jbG91ZDEuc3JjID0gXCJzcmMvYXNzZXRzL1Rha2UgRmxpZ2h0LTAzLnBuZ1wiO1xuXG5jb25zdCBjbG91ZDIgPSBuZXcgSW1hZ2UoKTtcbmNsb3VkMi5zcmMgPSBcInNyYy9hc3NldHMvVGFrZSBGbGlnaHQtMDQucG5nXCI7XG5cbmNvbnN0IGNhY3R1c0JpbiA9IFtcbiAgeyBpbWc6IGNhY3R1czEsIHdpZHRoOiAxODAsIGhlaWdodDogMzAwIH0sXG4gIHsgaW1nOiBjYWN0dXMyLCB3aWR0aDogMTgwLCBoZWlnaHQ6IDMwMCB9LFxuICB7IGltZzogY2FjdHVzMywgd2lkdGg6IDE1MCwgaGVpZ2h0OiAyNTAgfSxcbiAgeyBpbWc6IGNhY3R1czQsIHdpZHRoOiAxNTAsIGhlaWdodDogMTQwIH0sXG4gIHsgaW1nOiBjYWN0dXM1LCB3aWR0aDogMTAwLCBoZWlnaHQ6IDEwMCB9LFxuICB7IGltZzogY2FjdHVzNiwgd2lkdGg6IDE3MCwgaGVpZ2h0OiAxNTAgfSxcbiAgeyBpbWc6IGNhY3R1czcsIHdpZHRoOiAxMDAsIGhlaWdodDogMTUwIH0sXG4gIHsgaW1nOiBjYWN0dXM4LCB3aWR0aDogODAsIGhlaWdodDogMjgwIH0sXG5dO1xuXG5jb25zdCBjbG91ZFBvc2l0aW9ucyA9IHtcbiAgY2xvdWQxOiAxMDAsXG4gIGNsb3VkMjogLTMzMCxcbiAgY2xvdWQzOiAtNzMwLFxuICBjbG91ZDQ6IDcwMCxcbn07XG5cblxuY3R4LnRyYW5zbGF0ZSg2NDAsIDM2MCk7XG5cblxuXG5jb25zdCBrZXlEb3duSGFuZGxlciA9IChlKSA9PiB7XG4gIGlmIChlLmtleSA9PSBcIlJpZ2h0XCIgfHwgZS5rZXkgPT0gXCJBcnJvd1JpZ2h0XCIpIHtcbiAgICByaWdodFByZXNzZWQgPSB0cnVlO1xuICB9XG4gIGVsc2UgaWYgKGUua2V5ID09IFwiTGVmdFwiIHx8IGUua2V5ID09IFwiQXJyb3dMZWZ0XCIpIHtcbiAgICBsZWZ0UHJlc3NlZCA9IHRydWU7XG4gIH0gZWxzZSBpZiAoZS5rZXkgPT09ICcgJyB8fCBlLmtleSA9PT0gJ1NwYWNlYmFyJykge1xuICAgIHNwYWNlUHJlc3NlZCA9IHRydWU7XG4gIH1cbn07XG5cbmNvbnN0IGtleVVwSGFuZGxlciA9IChlKSA9PiB7XG4gIGlmIChlLmtleSA9PSBcIlJpZ2h0XCIgfHwgZS5rZXkgPT0gXCJBcnJvd1JpZ2h0XCIpIHtcbiAgICByaWdodFByZXNzZWQgPSBmYWxzZTtcbiAgfVxuICBlbHNlIGlmIChlLmtleSA9PSBcIkxlZnRcIiB8fCBlLmtleSA9PSBcIkFycm93TGVmdFwiKSB7XG4gICAgbGVmdFByZXNzZWQgPSBmYWxzZTtcbiAgfSBlbHNlIGlmIChlLmtleSA9PT0gJyAnIHx8IGUua2V5ID09PSAnU3BhY2ViYXInKSB7XG4gICAgLy8gcmVzdGFydCgpO1xuICAgIGFuaW1hdGUoKTtcbiAgICBhbmltYXRlKCk7XG4gICAgdGl0bGVDYXJkLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW5cIik7XG4gICAgc3BhY2VQcmVzc2VkID0gZmFsc2U7XG4gIH1cbn07XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIGtleURvd25IYW5kbGVyLCBmYWxzZSk7XG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwia2V5dXBcIiwga2V5VXBIYW5kbGVyLCBmYWxzZSk7XG5cbmNvbnN0IGRyYXdIb3Jpem9uID0gKCkgPT4ge1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5yZWN0KC0xMDAwLCB5LCAyMDAwLCAxNTAwKTtcblxuICBjdHguZmlsbFN0eWxlID0gXCIjZThlMmE0XCI7XG4gIGN0eC5maWxsKCk7XG4gIGN0eC5jbG9zZVBhdGgoKTtcbn07XG5cbi8vIGNvbnN0IGRyYXdSb3RhdGlvbiA9ICgpID0+IHtcbi8vICAgY3R4LmZvbnQgPSBcIjE2cHggQXJpYWxcIjtcbi8vICAgY3R4LmZpbGxTdHlsZSA9IFwiIzAwOTVERFwiO1xuLy8gICBjdHguZmlsbFRleHQoXCJSb3RhdGlvbjogXCIgKyByb3RhdGlvbiwgMSwgMSk7XG4vLyB9O1xuXG5jb25zdCBkcmF3U2NvcmUgPSAoKSA9PiB7XG4gIGlmIChzY29yZSA+IDQwMDApIHtcbiAgICBjdHguZm9udCA9IFwiMThweCBIZWx2ZXRpY2FcIjtcbiAgICBjdHguZmlsbFN0eWxlID0gXCIjMDA5NUREXCI7XG4gIH0gZWxzZSB7XG4gICAgY3R4LmZvbnQgPSBcIjE2cHggSGVsdmV0aWNhXCI7XG4gICAgY3R4LmZpbGxTdHlsZSA9IFwiIzAwOTVERFwiO1xuICB9XG4gIGN0eC5maWxsVGV4dChcIlNjb3JlOiBcIiArIHNjb3JlLCAzLCAtMyk7XG5cbn07XG5cbmNvbnN0IGRyYXdIaVNjb3JlID0gKCkgPT4ge1xuICBpZiAoc2NvcmUgPiBoaVNjb3JlKSBoaVNjb3JlID0gc2NvcmU7XG4gIGN0eC5mb250ID0gXCIxNnB4IEhlbHZldGljYVwiO1xuICBjdHguZmlsbFN0eWxlID0gXCJyZWRcIjtcbiAgXG4gIGN0eC5maWxsVGV4dChcIkhpZ2ggU2NvcmU6IFwiICsgaGlTY29yZSwgMywgLTIwKTtcblxufTtcblxuY29uc3Qgcm90YXRlQ2FtID0gKG51bSkgPT4ge1xuICBpZiAobnVtIDwgMTAwICYmIG51bSA+IDApIHtcbiAgICByZXR1cm4gY3R4LnJvdGF0ZSgoTWF0aC5QSSAvIDE4MCkgKiAwLjA1KTtcbiAgfSBlbHNlIGlmIChudW0gPiAtMTAwICYmIG51bSA8IDApIHtcbiAgICByZXR1cm4gY3R4LnJvdGF0ZSgoTWF0aC5QSSAvIDE4MCkgKiAtMC4wNSk7XG4gIH1cbn07XG5cbmNvbnN0IGRyYXdCaXJkID0gKCkgPT4ge1xuICBjdHguc2F2ZSgpO1xuICBcbiAgY3R4LnRyYW5zbGF0ZSgwLCAxNTApO1xuICBjdHgucm90YXRlKChNYXRoLlBJIC8gMTgwKSAqIC0oKHJvdGF0aW9uICogMC41ICkgLyA0KSk7XG5cbiAgLy8gY3R4LnNoYWRvd0JsdXIgPSA1MDtcbiAgLy8gY3R4LnNoYWRvd0NvbG9yID0gJ2JsYWNrJztcbiAgLy8gY3R4LnNoYWRvd09mZnNldFkgPSA4MDtcbiAgY3R4LmRyYXdJbWFnZShiaXJkSW1nLCAtMTI1LCAtNTAsIDI1MCwgMTAwKTtcbiAgLy8gY3R4LmJlZ2luUGF0aCgpO1xuICAvLyAvLyBjdHgucmVjdCgtNjAsIC0xMCwgMTIwLCAyMCk7XG4gIC8vIGN0eC5yZWN0KC0xMjUsIC01MCwgMjUwLCAxMDApO1xuICAvLyBjdHguZmlsbFN0eWxlID0gXCJibHVlXCI7XG4gIC8vIGN0eC5maWxsKCk7XG4gIC8vIGN0eC5jbG9zZVBhdGgoKTtcbiAgXG4gIFxuICBjdHgucmVzdG9yZSgpO1xufTtcblxuY29uc3QgZHJhd0NhY3R1cyA9ICh4LCB5LCB3LCBoLCBjb2xvciwgaW1nKSA9PiB7XG4gIGN0eC5zYXZlKCk7XG4gIC8vIGNvbnN0IHBsYWNlID0gLTMwICsgeDtcbiAgLy8gY29uc3Qgd2lkdGggPSAyMCArIHc7XG4gIC8vIGNvbnN0IGhlaWdodCA9IDYwICsgaDtcbiAgLy8gY29uc3QgZ3Jvd2luZ1ggPSBwbGFjZSArIGdYO1xuICAvLyBjb25zdCBncm93aW5nWSA9XG4gIGN0eC5kcmF3SW1hZ2UoaW1nLCB4LCB5LCB3LCBoKTtcbiAgLy8gY3R4LmJlZ2luUGF0aCgpO1xuICAvLyBjdHgucmVjdCh4LCB5LCB3LCBoKTtcbiAgLy8gY3R4LmZpbGxTdHlsZSA9IGNvbG9yO1xuICAvLyBjdHguZmlsbCgpO1xuICAvLyBjdHguY2xvc2VQYXRoKCk7XG4gIGN0eC5yZXN0b3JlKCk7XG59O1xuXG5jb25zdCBzcGF3bkNhY3RpID0gKCkgPT4ge1xuICBsZXQgeCA9IE1hdGguY2VpbChNYXRoLnJhbmRvbSgpICogODQwKSAqIChNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkpID8gMSA6IC0xKTtcbiAgbGV0IGNvbG9yID0gY2FjdGlDb2xvcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2FjdGlDb2xvcnMubGVuZ3RoKV07XG4gIGxldCB7IHdpZHRoLCBoZWlnaHQsIGltZyB9ID0gY2FjdHVzQmluW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNhY3R1c0Jpbi5sZW5ndGgpXTtcbiAgY2FjdGkudW5zaGlmdCh7XG4gICAgeDogeCxcbiAgICB5OiAtMTAwLFxuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodCxcbiAgICBjb2xvcjogY29sb3IsXG4gICAgaEluaXRpYWw6IDAsXG4gICAgeU9yZDogMCxcbiAgICBpbWc6IGltZ1xuICB9KTtcbiAgLy9hc3NpZ24gZGVmYXVsdCB2YXJpYWJsZXMgc3RvcmUgdGhlbSBpbiBvYmplY3RzXG59O1xuXG5jb25zdCBkcmF3Q2xvdWRzID0gKCkgPT4ge1xuICAvLyBjdHguYmVnaW5QYXRoKCk7XG4gIC8vIGN0eC5hcmMoY2xvdWQxLnNlYzEsIC0yMDAsIDUwLCAwLCAyICogTWF0aC5QSSk7XG4gIC8vIGN0eC5hcmMoY2xvdWQxLnNlYzIsIC0xNzAsIDQwLCAwLCAyICogTWF0aC5QSSk7XG4gIC8vIGN0eC5hcmMoY2xvdWQxLnNlYzMsIC0xNTAsIDMwLCAwLCAyICogTWF0aC5QSSk7XG4gIC8vIGN0eC5maWxsU3R5bGUgPSBcIiNhZGQ2ZDhcIjtcbiAgLy8gY3R4LmZpbGwoKTtcbiAgY3R4LmRyYXdJbWFnZShjbG91ZDEsIGNsb3VkUG9zaXRpb25zLmNsb3VkMSwgLTIwMCwgMzAwLCAyMDApO1xuICBjdHguZHJhd0ltYWdlKGNsb3VkMiwgY2xvdWRQb3NpdGlvbnMuY2xvdWQyLCAtMzAwLCAzMDAsIDE1MCk7XG4gIGN0eC5kcmF3SW1hZ2UoY2xvdWQxLCBjbG91ZFBvc2l0aW9ucy5jbG91ZDMsIC0yMDAsIDMwMCwgMjAwKTtcbiAgY3R4LmRyYXdJbWFnZShjbG91ZDIsIGNsb3VkUG9zaXRpb25zLmNsb3VkNCwgLTMwMCwgMzAwLCAxNTApO1xuXG4gIC8vIGN0eC5iZWdpblBhdGgoKTtcbiAgLy8gY3R4LmFyYyhjbG91ZDIuc2VjMSwgLTcwLCA0MCwgMCwgMiAqIE1hdGguUEkpO1xuICAvLyBjdHguYXJjKGNsb3VkMi5zZWMyLCAtMTAwLCA0MCwgMCwgMiAqIE1hdGguUEkpO1xuICAvLyBjdHguYXJjKGNsb3VkMi5zZWMzLCAtODAsIDUwLCAwLCAyICogTWF0aC5QSSk7XG4gIC8vIGN0eC5maWxsU3R5bGUgPSBcIiNhZGQ2ZDhcIjtcbiAgLy8gY3R4LmZpbGwoKTtcbn07XG5cbmNvbnN0IG1vdmVDbG91ZHMgPSAobnVtKSA9PiB7XG4gIGZvciAoY29uc3QgY2xvdWQgaW4gY2xvdWRQb3NpdGlvbnMpIHtcbiAgICBsZXQgcG9zID0gY2xvdWRQb3NpdGlvbnNbY2xvdWRdO1xuICAgIHBvcyArPSBudW07XG4gIH1cbn07XG5cbmNvbnN0IGZpbHRlckNhY3RpID0gKCkgPT4ge1xuICBjYWN0aSA9IGNhY3RpLmZpbHRlcihjYWN0dXMgPT4gKChjYWN0dXMueSkgPCA1NTApKTtcbn07XG5cbmNvbnN0IGFuaW1hdGUgPSAoKSA9PiB7XG4gIFxuICBjdHguY2xlYXJSZWN0KC0xMDAwLCAtMTAwMCwgMjAwMCwgMjAwMCk7XG4gIGZpbHRlckNhY3RpKCk7XG4gIGRyYXdIb3Jpem9uKCk7XG4gIGRyYXdDbG91ZHMoKTtcbiAgLy8gZHJhd1JvdGF0aW9uKCk7XG4gIGRyYXdTY29yZSgpO1xuICBkcmF3SGlTY29yZSgpO1xuICBkcmF3QmlyZCgpO1xuXG4gIC8vY2FjdHVzIHNwYXduIGZyZXF1ZW5jeVxuICBpZiAoY291bnRlciA9PT0gNTUpIHtcbiAgICBzcGF3bkNhY3RpKCk7XG4gICAgY291bnRlciA9IDA7XG4gIH1cblxuXG4gIGNhY3RpLmZvckVhY2goY2FjdHVzID0+IHtcbiAgICBjYWN0dXMueCArPSB0dXJuWDtcbiAgICBsZXQgaCA9IGNhY3R1cy5oZWlnaHQ7XG4gICAgaWYgKGNhY3R1cy5oSW5pdGlhbCA8IGNhY3R1cy5oZWlnaHQpIHtcbiAgICAgIGNhY3R1cy5oSW5pdGlhbCArPSAxO1xuICAgICAgaCA9IGNhY3R1cy5oSW5pdGlhbDtcbiAgICAgIGNhY3R1cy55T3JkIC09IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhY3R1cy55T3JkICs9IDEuNDk7XG4gICAgICBjYWN0dXMueSArPSAxLjQ5O1xuICAgICAgLy8gY2FjdHVzLndpZHRoICs9IGNhY3R1cy53aWR0aCAqIDAuMDAxNDtcbiAgICAgIC8vIGNhY3R1cy5oZWlnaHQgKz0gY2FjdHVzLmhlaWdodCAqIDAuMDAxNDtcbiAgICAgIC8vIGNhY3R1cy5oZWlnaHQgKj0gMS4wMDE0O1xuICAgICAgY2FjdHVzLmhJbml0aWFsID0gY2FjdHVzLmhlaWdodDtcbiAgICB9XG5cbiAgICAvL2NhY3R1cyByZW1vdmFsIGFuaW1hdGlvbiBhbmQgeU9yZCBzcGVlZCBjb250cm9sXG4gICAgLy8gaWYgKGNhY3R1cy53aWR0aCA+IDUwKSB7XG4gICAgLy8gICBjYWN0dXMueU9yZCArPSAxO1xuICAgIC8vICAgY2FjdHVzLmhlaWdodCAtPSAxO1xuICAgIC8vIH0gZWxzZSBpZiAoY2FjdHVzLndpZHRoID4gMjcpIHtcbiAgICAvLyAgIGNhY3R1cy55T3JkICs9IDE7XG4gICAgLy8gICAvLyBjYWN0dXMuY29sb3IgPSBcImJsYWNrXCI7XG4gICAgLy8gfSBlbHNlIGlmIChjYWN0dXMud2lkdGggPiAyMykge1xuICAgIC8vICAgY2FjdHVzLnlPcmQgKz0gMC41O1xuICAgIC8vICAgLy8gY2FjdHVzLmNvbG9yID0gXCJyZWRcIjtcbiAgICAvLyB9XG5cbiAgICBpZiAoY2FjdHVzLnkgPiAwKSB7XG4gICAgICAvLyBjYWN0dXMuY29sb3IgPSBcInJlZFwiO1xuICAgIH1cblxuICAgIC8vIGNhY3R1cyBwYXRoIGNoYW5nZSB0byBhY2NvdW50IGZvciBwZXJzcGVjdGl2ZVxuICAgIGlmIChjYWN0dXMueSA+IC05MCkge1xuICAgICAgaWYgKGNhY3R1cy54ID4gMTAwKSB7XG4gICAgICAgIGNhY3R1cy54ICs9IDAuNTU7XG4gICAgICB9IGVsc2UgaWYgKGNhY3R1cy54IDwgLTEwMCkge1xuICAgICAgICBjYWN0dXMueCAtPSAwLjU1O1xuICAgICAgfSBlbHNlIGlmIChjYWN0dXMueCA+IDYwKSB7XG4gICAgICAgIGNhY3R1cy54ICs9IDAuMjtcbiAgICAgIH0gZWxzZSBpZiAoY2FjdHVzLnggPCAtNjApIHtcbiAgICAgICAgY2FjdHVzLnggLT0gMC4yO1xuICAgICAgfSBlbHNlIGlmIChjYWN0dXMueCA+IDgwKSB7XG4gICAgICAgIGNhY3R1cy54ICs9IDAuNDtcbiAgICAgIH0gZWxzZSBpZiAoY2FjdHVzLnggPCAtODApIHtcbiAgICAgICAgY2FjdHVzLnggLT0gMC40O1xuICAgICAgfSBlbHNlIGlmIChjYWN0dXMueCA+IDQwKSB7XG4gICAgICAgIGNhY3R1cy54ICs9IDAuMTtcbiAgICAgIH0gZWxzZSBpZiAoY2FjdHVzLnggPCAtNDApIHtcbiAgICAgICAgY2FjdHVzLnggLT0gMC4xO1xuICAgICAgfSBlbHNlIGlmIChjYWN0dXMueCA+IDIwKSB7XG4gICAgICAgIGNhY3R1cy54ICs9IDAuMDU7XG4gICAgICB9IGVsc2UgaWYgKGNhY3R1cy54IDwgLTIwKSB7XG4gICAgICAgIGNhY3R1cy54IC09IDAuMDU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbGV0IGNhY3R1c0hpdCA9IGNhY3R1cy55IC0gKCBoLzUgKTtcbiAgICBsZXQgY2FjdHVzSGl0ID0gY2FjdHVzLnk7XG4gICAgbGV0IGxlZnRIaXQgPSBjYWN0dXMueCArIChjYWN0dXMud2lkdGggLyAyKTtcblxuICAgIC8vIGlmICgoY2FjdHVzSGl0IDwgMTAgJiYgY2FjdHVzSGl0ID4gNSkgJiYgKGNhY3R1cy54ID4gLTIyNSAmJiBjYWN0dXMueCA8IDEwMCkpIHtcbiAgICBpZiAoKGNhY3R1cy55IDwgMTAgJiYgY2FjdHVzLnkgPiA1KSAmJiAobGVmdEhpdCA+IC0xMjUgJiYgbGVmdEhpdCA8IDEyNSkpIHtcbiAgICAgIC8vIGNhY3R1cy5jb2xvciA9IFwicHVycGxlXCI7XG4gICAgICAvLyBjbGVhckludGVydmFsKGludGVydmFsKTtcbiAgICAgIGRvY3VtZW50LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgIH1cblxuICAgIGRyYXdDYWN0dXMoY2FjdHVzLngsIGNhY3R1cy55T3JkLCBjYWN0dXMud2lkdGgsIGgsIGNhY3R1cy5jb2xvciwgY2FjdHVzLmltZyApO1xuICB9KTtcbiAgXG4gIGlmIChsZWZ0UHJlc3NlZCkge1xuICAgIGlmICh0dXJuWCA8PSAwKSAge1xuICAgICAgdHVyblggKz0gMC4wNTU7XG4gICAgfSBlbHNlIGlmICh0dXJuWCA+IDAgJiYgdHVyblggPCAxLjcpIHtcbiAgICAgIHR1cm5YICs9IDAuMDM1O1xuICAgIH1cbiAgICBtb3ZlQ2xvdWRzKDAuNjEpOyAvL2NoYW5nZSB2YWx1ZSB0byBzaGlmdCBjbG91ZCB4IHBvc2l0aW9uICBcbiAgICBpZiAocm90YXRpb24gPCAxMDAgJiYgcm90YXRpb24gPj0gMCkge1xuICAgICAgcm90YXRpb24gKz0gMTtcbiAgICAgIHJvdGF0ZUNhbShyb3RhdGlvbik7XG4gICAgfSBlbHNlIGlmIChyb3RhdGlvbiA8IDApIHtcbiAgICAgIHJvdGF0aW9uICs9IDE7XG4gICAgICBjdHgucm90YXRlKChNYXRoLlBJIC8gMTgwKSAqIDAuMDUpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChyaWdodFByZXNzZWQpIHtcbiAgICBpZiAodHVyblggPj0gMCkge1xuICAgICAgdHVyblggLT0gMC4wNTU7XG4gICAgfSBlbHNlIGlmICh0dXJuWCA8IDAgJiYgdHVyblggPiAtMS43KSB7XG4gICAgICB0dXJuWCAtPSAwLjM1O1xuICAgIH1cbiAgICBtb3ZlQ2xvdWRzKC0wLjYxKTsgLy9jaGFuZ2UgdmFsdWUgdG8gc2hpZnQgY2xvdWQgeCBwb3NpdGlvbiBcbiAgICBpZiAocm90YXRpb24gPiAtMTAwICYmIHJvdGF0aW9uIDw9IDApIHtcbiAgICAgIHJvdGF0aW9uIC09IDE7XG4gICAgICByb3RhdGVDYW0ocm90YXRpb24pO1xuICAgIH0gZWxzZSBpZiAocm90YXRpb24gPiAwKSB7XG4gICAgICByb3RhdGlvbiAtPSAxO1xuICAgICAgY3R4LnJvdGF0ZSgoTWF0aC5QSSAvIDE4MCkgKiAtMC4wNSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChyb3RhdGlvbiA+IDApIHtcbiAgICAgIHJvdGF0aW9uIC09IDE7XG4gICAgICBjdHgucm90YXRlKChNYXRoLlBJIC8gMTgwKSAqIC0wLjA1KTtcbiAgICB9IGVsc2UgaWYgKHJvdGF0aW9uIDwgMCkge1xuICAgICAgcm90YXRpb24gKz0gMTtcbiAgICAgIGN0eC5yb3RhdGUoKE1hdGguUEkgLyAxODApICogMC4wNSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHR1cm5YID0gMDtcbiAgICB9XG4gIH1cbiAgY291bnRlciArPSAxO1xuICBzY29yZSArPSAxO1xuICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7XG59O1xuXG5cbi8vIGNvbnN0IGludGVydmFsID0gc2V0SW50ZXJ2YWwoYW5pbWF0ZSwgMTApO1xuLy8gYW5pbWF0ZSgpO1xuLy8gaWYgKHNwYWNlUHJlc3NlZCkge1xuLy8gICBpbnRlcnZhbCgpO1xuLy8gfVxuXG4gICAgLy9vbiBrZXlkb3duIHRoZSBob3Jpem9uIHJvdGF0ZXMgdG8gYSBjZXJ0YWluIHBvaW50XG4gICAgLy9vbiBrZXl1cCB0aGUgaG9yaXpvbiByZXR1cm5zIHRvIGl0cyBpbml0aWFsIHN0YXRlXG4gICAgLy9hcyB0aGUgaG9yaXpvbiBzaGlmdHMgZW5lbXkgZWxlbWVudHMvb2JzdGFjbGVzIHNoaWZ0IHRvb1xuICAgIC8vdGhleSBhbHNvIGFkZCBvciBkZWNyZWFzZSB0aGVpciB4IHBvc2l0aW9uIGRlcGVuZGluZyBvbiB0aGUga2V5IGRpcmVjdGlvblxuXG4gICAgLy92YXJpYWJsZSBmb3IgdGltZSBlbGFwc2VkID09PSBoaWdoIHNjb3JlXG4gICAgLy9oaWdoIHNjb3JlIHNhdmVkIGFuZCBkaXNwbGF5ZWRcblxuXG4iXSwic291cmNlUm9vdCI6IiJ9